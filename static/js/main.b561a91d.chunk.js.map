{"version":3,"sources":["Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","prop","className","width","height","language","theme","value","input","options","selectOnLineNumbers","onChange","result","App","props","newValue","e","code","onChangInput","selectLanguage","index","setState","selectedLanguage","state","languages","selectedLanguageId","languagesCode","runCode","arr","disableAll","data","lagnguage","axios","post","then","response","output","console","log","status","id","stdout","compile_output","stderr","catch","re","alert","saveCode","editor","monaco","focus","this","lang","style","background","type","onClick","disabled","class","data-toggle","aria-haspopup","aria-expanded","bind","href","editorDidMount","float","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b561a91d.chunk.js","sourcesContent":["import React from 'react';\r\nimport MonacoEditor from 'react-monaco-editor';\r\nimport './App.css';\r\nimport './Sidebar.css';\r\nfunction Sidebar (prop)\r\n{\r\n    const options = {\r\n      selectOnLineNumbers: true\r\n    };\r\n    return (\r\n      <div className=\"center\">\r\n      <label>Input</label>\r\n      <MonacoEditor\r\n        width=\"300\"\r\n        height=\"200\"\r\n        language=\"javascript\"\r\n        theme=\"vs-dark\"\r\n        value={prop.input}\r\n        options={options}\r\n        onChange={prop.onChange}\r\n        \r\n      />\r\n      <lable>Output</lable>\r\n      <MonacoEditor\r\n        width=\"300\"\r\n        height=\"150\"\r\n        language=\"javascript\"\r\n        theme=\"vs-dark\"\r\n        value={prop.result}\r\n        \r\n      />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport './App.css';\nimport  Sidebar  from './Sidebar';\nimport axios from 'axios';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '# Hello World program in Python',\n      input:'',\n      result:'',\n      languages:[\"c++11\",\"Python\"],\n      selectedLanguage:\"Python\", \n      selectedLanguageId:\"1\",\n      languagesCode:['// hello world program in c++','# Hello World program in Python'],\n      disableAll:false,\n    }\n    this.code=\"\";\n    this.input=\"\";\n  }\n  editorDidMount(editor, monaco) {\n    console.log('editorDidMount', editor);\n    editor.focus();\n  }\n  onChange=(newValue, e)=> {\n    this.code=newValue;\n   \n  }\n  onChangInput=(newValue,e)=>\n  {\n    this.input=newValue\n  }\n  selectLanguage=(index)=>\n  {\n    \n   this.setState({\n      selectedLanguage:this.state.languages[index],\n      selectedLanguageId:index,\n      code:this.state.languagesCode[index],\n      result:\"\",\n      input:\"\"\n    });\n    \n  }\n  runCode=()=>\n  {\n    var arr=this.state.languagesCode;\n    arr[this.state.selectedLanguageId]=this.code;\n\n    this.setState({\n      code:this.code,\n      input:this.input,\n      disableAll:true,\n      languagesCode:arr,\n      \n    });\n\n     const data={\n      code:this.code,\n      input:this.input,\n      lagnguage:this.state.selectedLanguage,\n    }\n    \n    axios.post(\"https://dudley-lumberjack-92939.herokuapp.com/compile\",data).then(response=>{\n    console.log(response);  \n    var output;\n    if(response.data.status.id==3)output=response.data.stdout;\n    else if(response.data.compile_output)output=response.data.compile_output;\n    else output=response.data.stderr;\n    this.setState({\n        result:output,\n        disableAll:false\n      })\n    }).catch(re=>{\n      alert(\"Something went wrong!!!\");\n      this.setState({\n        disableAll:false\n      })\n    });\n\n\n  }\n  saveCode=()=>\n  {\n    var arr=this.state.languagesCode;\n    arr[this.state.selectedLanguageId]=this.code;\n\n    this.setState({\n      code:this.code,\n      languagesCode:arr,\n      \n    });\n\n\n  }\n  render() {\n    const code = this.state.code;\n    const input=this.state.input;\n    const result=this.state.result;\n    const lang=this.state.selectedLanguage;\n    const options = {\n      selectOnLineNumbers: true\n    };\n\n    return (\n      <div style={{background:\"#9e9a90\"}}>\n      <button type=\"button\" className=\"btn btn-outline-primary btn-sm mr-1\" onClick={this.runCode} disabled={this.state.disableAll} >Run</button>\n      <button type=\"button\" className=\"btn btn-outline-success btn-sm mr-1\" onClick={this.saveCode} disabled={this.state.disableAll}>Save</button>\n      <div className=\"btn-group\">\n  <button type=\"button\" class=\"btn btn-danger dropdown-toggle btn-sm\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.disableAll}> \n    {lang}\n  </button>\n  <div className=\"dropdown-menu\">\n    {/* <a className=\"dropdown-item\" onClick={this.selectLanguage.bind(this,0)} href=\"#\">c++11</a> */}\n    <a className=\"dropdown-item\" onClick={this.selectLanguage.bind(this,1)} href=\"#\">Python</a>\n    \n    \n  </div>\n</div>\n      <div className=\"rowC\">\n        \n      <MonacoEditor\n      \n        width=\"500\"\n        height=\"400\"\n        language=\"javascript\"\n        theme=\"vs-dark\"\n        value={code}\n        options={options}\n        onChange={this.onChange}\n        editorDidMount={this.editorDidMount}\n      />\n      <div style={{float:'left'}}>\n      <Sidebar input={input} result={result} onChange={this.onChangInput}></Sidebar>\n      </div>\n      </div>\n      \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}